library(reshape)
df2 <- melt(df1)
df2$time <- paste0("01-",df2$variable,'-',rep(rownames(df1), ncol(df1)))
df2$time <- as.Date(df2$time, "%d-%b-%Y")
( df2 <- df2[order(df2$time),] )
( salests <- ts(df2$value, frequency=12, start = c(2015,1)) )
library(ggfortify)
library(forecast)
autoplot(salests)  +
forecast::autolayer(ma(salests, 5), series="5 Moving Average")
install.packages(pkgs = "ggstatsplot")
#loading needed libraries
library(ggstatsplot)
# for reproducibility
set.seed(123)
# plot
ggstatsplot::ggbetweenstats(
data = iris,
x = Species,
y = Sepal.Length,
title = "Distribution of sepal length across Iris species",
messages = FALSE
) + # further modification outside of ggstatsplot
ggplot2::coord_cartesian(ylim = c(3, 8)) +
ggplot2::scale_y_continuous(breaks = seq(3, 8, by = 1))
ggstatsplot::ggscatterstats(
data = ggplot2::msleep,
x = sleep_rem,
y = awake,
xlab = "REM sleep (in hours)",
ylab = "Amount of time spent awake (in hours)",
title = "Understanding mammalian sleep",
messages = FALSE
)
library("jpeg")
reduce_dimensions <- function(input_file,ouput_file,width,height) {
img <- readJPEG(input_file)
nrows = nrow(img);
ncols = ncol(img);
rem_rows = (nrows - width)%% 2
rem_cols = (ncols - height)%% 2
if((width %% 2) == 0) {
remov_rows = ((nrows/2) - ( width/2)+1): ((nrows/2) + ( width/2))
} else {
remov_rows = trunc(((nrows/2) - ( width/2)+1)): trunc(((nrows/2) +( width/2)))
}
if((height %% 2) == 0) {
remov_cols = ((ncols/2) - (height/2)+1): ((ncols/2) + (height/2))
} else {
remov_cols = trunc(((ncols/2)) - (height/2)+1): trunc(((ncols/2)) + (height/2))
}
new_img = array(dim = c(width, height, dim(img)[3]))
for (i in 1:dim(img)[3]) {
new_img[,, i] = img[,, i][remov_rows, remov_cols]
}
writeJPEG(new_img, target = ouput_file)
return(new_img)
}
dim(reduce_dimensions("mandrill.jpg","new_image.jpg", 297, 200))
#' A function to reduce the dimension of a give image by removing vertical and horizontal seams
#'
#' A new image with the modified width and height will be created
#'
#' @param input_file character
#' @param output_file character
#'
#' @return an array of image
#' @export
#' @examples
#' reduce_dimensions(input_file,output_file,width,height)
library("jpeg")
reduce_dimensions <- function(input_file,ouput_file,width,height) {
img <- readJPEG(input_file)
nrows = nrow(img);
ncols = ncol(img);
rem_rows = (nrows - width)%% 2
rem_cols = (ncols - height)%% 2
if((width %% 2) == 0) {
remov_rows = ((nrows/2) - ( width/2)+1): ((nrows/2) + ( width/2))
} else {
remov_rows = trunc(((nrows/2) - ( width/2)+1)): trunc(((nrows/2) +( width/2)))
}
if((height %% 2) == 0) {
remov_cols = ((ncols/2) - (height/2)+1): ((ncols/2) + (height/2))
} else {
remov_cols = trunc(((ncols/2)) - (height/2)+1): trunc(((ncols/2)) + (height/2))
}
new_img = array(dim = c(width, height, dim(img)[3]))
for (i in 1:dim(img)[3]) {
new_img[,, i] = img[,, i][remov_rows, remov_cols]
}
writeJPEG(new_img, target = ouput_file)
return(new_img)
}
dim(reduce_dimensions("mandrill.jpg","new_image.jpg", 297, 200))
#' A function to reduce the dimension of a give image by removing vertical and horizontal seams
#'
#' A new image with the modified width and height will be created
#'
#' @param input_file character
#' @param output_file character
#'
#' @return an array of image
#' @export
#' @examples
#' reduce_dimensions(input_file,output_file,width,height)
library("jpeg")
reduce_dimensions <- function(input_file, ouput_file, width, height) {
img <- readJPEG(input_file)
nrows = nrow(img)
ncols = ncol(img)
rem_rows = (nrows - width) %% 2
rem_cols = (ncols - height) %% 2
if ((width %% 2) == 0) {
remov_rows = ((nrows / 2) - (width / 2) + 1):((nrows / 2) + (width / 2))
} else {
remov_rows = trunc(((nrows / 2) - (width / 2) + 1)):trunc(((nrows / 2) +
(width / 2)))
}
if ((height %% 2) == 0) {
remov_cols = ((ncols / 2) - (height / 2) + 1):((ncols / 2) + (height / 2))
} else {
remov_cols = trunc(((ncols / 2)) - (height / 2) + 1):trunc(((ncols / 2)) + (height /
2))
}
new_img = array(dim = c(width, height, dim(img)[3]))
for (i in 1:dim(img)[3]) {
new_img[, , i] = img[, , i][remov_rows, remov_cols]
}
writeJPEG(new_img, target = ouput_file)
return(new_img)
}
dim(reduce_dimensions("mandrill.jpg", "new_image.jpg", 297, 200))
#' A function to reduce the dimension of a give image by removing vertical and horizontal seams
#'
#' A new image with the modified width and height will be created
#'
#' @param input_file character, the file path for the input file
#' @param output_file character, the file path for the output file
#' @param width integer, the width of the reduced image
#' @param height integer, the height of the reduce image
#' @return an array of image
#' @export
#' @examples reduce_dimensions("mandrill.jpg", "new_image.jpg", 297, 200)
#' reduce_dimensions(input_file,output_file,width,height)
library("jpeg")
reduce_dimensions <- function(input_file, ouput_file, width, height) {
img <- readJPEG(input_file)
nrows = nrow(img)
ncols = ncol(img)
rem_rows = (nrows - width) %% 2
rem_cols = (ncols - height) %% 2
if ((width %% 2) == 0) {
remov_rows = ((nrows / 2) - (width / 2) + 1):((nrows / 2) + (width / 2))
} else {
remov_rows = trunc(((nrows / 2) - (width / 2) + 1)):trunc(((nrows / 2) +
(width / 2)))
}
if ((height %% 2) == 0) {
remov_cols = ((ncols / 2) - (height / 2) + 1):((ncols / 2) + (height / 2))
} else {
remov_cols = trunc(((ncols / 2)) - (height / 2) + 1):trunc(((ncols / 2)) + (height /
2))
}
new_img = array(dim = c(width, height, dim(img)[3]))
for (i in 1:dim(img)[3]) {
new_img[, , i] = img[, , i][remov_rows, remov_cols]
}
writeJPEG(new_img, target = ouput_file)
return(new_img)
}
dim(reduce_dimensions("mandrill.jpg", "images/reduced.jpg", 297, 200))
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics(c('linear_vs_logistic_regression.jpg'))
library(dplyr)
library(dummies)
require(foreign)
require(ggplot2)
require(MASS)
require(Hmisc)
require(reshape2)
library(glmnet)
options(warn=-1) #suppress warnings
bank_additional_full <- read.csv("bank-additional-full.csv",header=TRUE)
install.packages("AER", lib="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(reticulate)
use_python("/user/local/bin/pyhton")
library(reticulate)
use_python("/user/local/bin/pyhton")
Sys.which("python")
library(reticulate)
use_python("/user/local/bin/pyhton")
Sys.which("python")
library(reticulate)
use_python("/user/local/bin/pyhton")
reticulate::conda_create("r-reticulate")
library(reticulate)
use_python("/user/local/bin/pyhton")
reticulate::conda_create("r-reticulate")
library(reticulate)
use_python("/user/local/bin/pyhton")
reticulate::conda_create("r-reticulate")
library(reticulate)
use_python("/user/local/bin/pyhton")
reticulate::use_condaenv("r-reticulate", required = TRUE)
knitr::opts_chunk$set(collapse = TRUE)
library(reticulate)
use_virtualenv("r-reticulate")
use_python("F:/Anaconda3", required = TRUE)
knitr::opts_chunk$set(collapse = TRUE)
library(reticulate)
use_virtualenv("r-reticulate")
reticulate::use_python("/usr/bin/python3")
py_config()
knitr::opts_chunk$set(collapse = TRUE)
library(reticulate)
use_virtualenv("r-reticulate")
reticulate::use_python("//anaconda3/bin/python")
py_config()
knitr::opts_chunk$set(collapse = TRUE)
library(reticulate)
use_virtualenv("r-reticulate")
reticulate::use_python("//anaconda3/bin/python")
py_config()
knitr::opts_chunk$set(collapse = TRUE)
library(reticulate)
use_virtualenv("r-reticulate")
reticulate::use_python("//anaconda3/bin/python")
knitr::opts_chunk$set(collapse = TRUE)
library("reticulate")
use_python('<PATH_TO_PYTHON>', required = TRUE))
htmltools::includeHTML("data/map.html")
[s](data/map_img)
[s]('data/map_img')
[!]('data/map_img')
![Drag Racing](data/map_img)
![image info](data/map_img)
![image](data/map_img)
![image](data/map_img.png)
![image](map_img.png)
print(';asd')
![image](map_img.png)
remove.packages('gganimate')
marathon <- read_csv("marathon.csv", col_types = cols(
id = col_factor(),
female = col_factor(),
footwear = col_factor(),
group = col_factor(),
injury = col_factor()
)) %>%
filter(completed_marathon == 1) %>%
mutate(speed = distance / time,
id = factor(id),) %>%
select(-c(completed_marathon,
distance,
time))
library(tidyverse)
library(broom)
library(rsample)
marathon <- read_csv("marathon.csv", col_types = cols(
id = col_factor(),
female = col_factor(),
footwear = col_factor(),
group = col_factor(),
injury = col_factor()
)) %>%
filter(completed_marathon == 1) %>%
mutate(speed = distance / time,
id = factor(id),) %>%
select(-c(completed_marathon,
distance,
time))
marathon <- read_csv("marathon.csv", col_types = cols(
id = col_factor(),
female = col_factor(),
footwear = col_factor(),
group = col_factor(),
injury = col_factor()
)) %>%
filter(completed_marathon == 1) %>%
mutate(speed = distance / time,
id = factor(id),) %>%
select(-c(completed_marathon,
distance,
time))
marathon
tidy(lm(speed~training_miles,marathon))
library(infer)
permu_null <- marathon %>%
specify(formula = speed ~ training_miles) %>%
hypothesize(null = "independence") %>%
generate(reps = 5000, type = "permute") %>%
calculate(stat = "slope")
#visualize(permu_null)
visualize(permu_null) +
shade_p_value(obs_stat = observed_slope, direction = "both")
permu_null <- marathon %>%
specify(formula = speed ~ training_miles) %>%
hypothesize(null = "independence") %>%
generate(reps = 5000, type = "permute") %>%
calculate(stat = "slope") %>%
visualize(permu_null)
marathon <- read_csv("marathon.csv", col_types = cols(
id = col_factor(),
female = col_factor(),
footwear = col_factor(),
group = col_factor(),
injury = col_factor()
)) %>%
marathon
marathon <- read_csv("marathon.csv", col_types = cols(
id = col_factor(),
female = col_factor(),
footwear = col_factor(),
group = col_factor(),
injury = col_factor()
)) %>%
marathon
marathon <- read_csv("marathon.csv", col_types = cols(
id = col_factor(),
female = col_factor(),
footwear = col_factor(),
group = col_factor(),
injury = col_factor()
)) %>%
marathon
marathon <- read_csv("marathon.csv", col_types = cols(
id = col_factor(),
female = col_factor(),
footwear = col_factor(),
group = col_factor(),
injury = col_factor()
))
marathon
marathon %>% filter(completed_marathon == 1) %>%
mutate(speed = distance / time,
id = factor(id),) %>%
select(-c(completed_marathon,
distance,
time))
marathon
marathon %>% filter(completed_marathon == 1) %>%
mutate(speed = distance / time,
id = factor(id),) %>%
select(-c(completed_marathon,
distance,
time))
marathon
marathon %>% filter(completed_marathon == 1) %>%
mutate(speed = distance / time,
id = factor(id),) %>%
select(-c(completed_marathon,
distance,
time))
marathon
pi <- ggplot(marathon, aes(training_miles, speed) )+
geom_jitter() +
xlab('Provinces') +
ylab("Median Income") +
theme_bw()
speed_plot <- ggplot(marathon, aes(training_miles, speed) )+
geom_jitter() +
xlab('Provinces') +
ylab("Median Income") +
theme_bw()
speed_plot
marathon <- read_csv("marathon.csv", col_types = cols(
id = col_factor(),
female = col_factor(),
footwear = col_factor(),
group = col_factor(),
injury = col_factor()
))
marathon
marathon_speed <- marathon %>% filter(completed_marathon == 1) %>%
mutate(speed = distance / time,
id = factor(id),) %>%
select(-c(completed_marathon,
distance,
time))
marathon_speed
plot_speed <- marathon_speed %>% ggplot(marathon, aes(training_miles, speed) )+
geom_jitter() +
xlab('Provinces') +
ylab("Median Income") +
theme_bw()
plot_speed <- marathon_speed %>% ggplot(aes(training_miles, speed))+
geom_jitter() +
xlab('Provinces') +
ylab("Median Income") +
theme_bw()
plot_speed
plot_speed <- marathon_speed %>% ggplot(aes(training_miles, speed), color = injury )+
geom_jitter() +
xlab('training_miles') +
ylab("speed") +
theme_bw()
plot_speed
plot_speed <- marathon_speed %>% ggplot(aes(training_miles, speed, color = injury))+
geom_jitter() +
xlab('training_miles') +
ylab("speed") +
theme_bw()
plot_speed
plot_speed <- marathon_speed %>% ggplot(aes(training_miles, speed, color = injury))+
geom_jitter() +
xlab('training_miles') +
ylab("speed") +
theme_bw()+
ggtitle("Plot of length \n by dose")
plot_speed
plot_speed <- marathon_speed %>% ggplot(aes(training_miles, speed, color = injury))+
geom_jitter() +
xlab('training_miles') +
ylab("speed") +
theme_bw()+
ggtitle("Variation of speed by training miles and injury")
plot_speed
marathon_speed <- marathon %>% filter(completed_marathon == 1) %>%
mutate(speed = distance / time,
id = factor(id),) %>%
select(-c(completed_marathon,
distance,
time))
marathon_speed
plot_speed <- marathon_speed %>% ggplot(aes(training_miles, speed, color = injury))+
geom_jitter() +
xlab('training_miles') +
ylab("speed") +
theme_bw()+
ggtitle("Variation of speed by training miles and injury")
plot_speed
marathon_speed %>%
lm(speed~training_miles) %>%
tidy()
marathon_speed %>%
lm(speed~training_miles) %>%
tidy()
# we will filter only those who completed the marathon and then calculate the speed
marathon_speed <- marathon %>% filter(completed_marathon == 1) %>%
mutate(speed = distance / time,
id = factor(id),) %>%
select(-c(completed_marathon,
distance,
time))
marathon_speed
# we will filter only those who completed the marathon and then calculate the speed
marathon_speed <- marathon %>% filter(completed_marathon == 1) %>%
mutate(speed = distance / time,
id = factor(id),) %>%
select(-c(completed_marathon,
distance,
time,female,footwear,group))
marathon_speed
# we will filter only those who completed the marathon and then calculate the speed
marathon_speed <- marathon %>% filter(completed_marathon == 1) %>%
mutate(speed = distance / time,
id = factor(id),) %>%
select(-c(completed_marathon,
distance,age,
time,female,footwear,group))
marathon_speed
# we will filter only those who completed the marathon and then calculate the speed
marathon_speed <- marathon %>% filter(completed_marathon == 1) %>%
mutate(speed = distance / time,
id = factor(id),) %>%
select(-c(completed_marathon,
distance,age,bmi
time,female,footwear,group))
# we will filter only those who completed the marathon and then calculate the speed
marathon_speed <- marathon %>% filter(completed_marathon == 1) %>%
mutate(speed = distance / time,
id = factor(id),) %>%
select(-c(completed_marathon,
distance,age,bmi,
time,female,footwear,group))
marathon_speed
plot_speed <- marathon_speed %>% ggplot(aes(training_miles, speed, color = injury))+
geom_jitter() +
xlab('training_miles') +
ylab("speed") +
theme_bw()+
ggtitle("Variation of speed by training miles and injury")
plot_speed
# now let's visualize the relationship between speed and training miles and injury
plot_speed <- marathon_speed %>% ggplot(aes(training_miles, speed, color = injury))+
geom_jitter() +
xlab('training_miles') +
ylab("speed") +
theme_bw()+
ggtitle("Variation of speed by training miles and injury")
plot_speed
# Finally, we will build the mode
tidy(lm(speed~training_miles,marathon_speed))
setwd("~/stock_price_prediction")
stock<- ts(read_csv('INO.csv')$captures, start = 1821)
stock<- ts(read_csv('INO.csv')$Open, start = 1821)
knitr::opts_chunk$set(warning = FALSE,
message = FALSE)
library(tidyverse)
library(broom)
library(forecast)
library(zoo)
library(gridExtra)
library(ggplot2)
library(MLmetrics)
stock<- ts(read_csv('INO.csv')$Open, start = 1821)
acf(stock)
pacf(lynx)
stock<- ts(read_csv('INO.csv')$Open, start = 1821)
acf(stock)
pacf(stock)
